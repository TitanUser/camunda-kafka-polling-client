##
# This workflow builds and tests docker image and pushes it to AWS ECR for camunda-kafka-polling-client.
##

name: Build_release_and_push_to_AWS_ECR

# Triggered by a published release (pre-release).
on:
  release:
    types: [prereleased, released]

jobs:

  build_and_push:
    name: Build and push to AWS ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # BUILD:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up JDK 1.8
        uses: actions/setup-java@v2.1.0
        with:
          distribution: 'adopt' # See 'Supported distributions' for available options
          java-version: '8'

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Execute build
        # The *install* command executes each default lifecycle phase in order: validate -> compile -> test -> package -> verify, before executing install.
        run: mvn clean install

      - name: Login to public ECR
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_PROD_ECR_VIADEE_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_PROD_ECR_VIADEE_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      # PUSH:
      # camunda-kafka-polling-client
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: public.ecr.aws/viadee/camunda-kafka-polling-client
          tags: |
            type=semver,pattern={{version}}
          flavor: latest=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v2.6.1
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}